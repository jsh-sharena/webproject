<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>ES6语法补充</title>
    <script src="lib/vue.js"></script>
</head>

<body>
    <div id="app">
        <button>1</button>
        <button>2</button>
        <button>3</button>
        <button>4</button>
        <button>5</button>
    </div>
    <script>
        //ES5之前因为if和for都没有块级作用域的概念,所以在很多时候,我们都必须借助function的作用域来
        //来解决应用外面变量问题
        //ES6中,使用let添加了if和for的块级作用域
        //1.变量作用域：变量在什么范围内是可用，
        /**/
        {
            var name = "why";
            console.log(name);
        }
        //console.log(name);
        //2.没有块级作用域引起的问题:if的块级
        var func;
        if (true) {
            var name = "why";
            func = function() {
                console.log(name);
            }
            func();
        }
        name = "kobe";
        func();
        console.log(name);
        //3.没有块级作用域引起的问题:for的块级
        /*
        var btns = document.getElementsByTagName('button');
        for (var i = 0; i < btns.length; i++) {
            btns[i].addEventListener('click', function() {
                console.log('第' + i + '个按钮被点击');
            })


            //解决方案:闭包
            (function(num) {
                btns[i].addEventListener('click', function() {
                    console.log('第' + num + '个按钮被点击');
                })
            })(i)

           
        }
 */
        //使用ES6语法

        const btns = document.getElementsByTagName('button');
        for (let i = 0; i < btns.length; i++) {
            btns[i].addEventListener('click', function() {
                console.log('第' + i + '个按钮被点击');
            })
        }
        /* */
        //为什么闭包可以解决问题:函数是一个作用域
        var name = "why";

        function abc(name) {
            console.log(name);
        }
        name = "kobe";
        //abc("aaaa")
    </script>
</body>

</html>